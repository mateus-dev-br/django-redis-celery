Django Redis Celery Async Email Project
This project is a Django web application that demonstrates asynchronous email sending using Celery and Redis. The project is configured to offload the task of sending emails to a background worker to improve response times for users.

Requirements
Python 3.10+
Django 5.1.2
Redis server
Celery 5.4.0
Setup
Follow these instructions to set up the project on your local machine.

1. Clone the repository
bash
Copiar código
git clone https://github.com/your-username/your-repo.git
cd your-repo
2. Create and activate a virtual environment
bash
Copiar código
python3 -m venv venv
source venv/bin/activate
3. Install dependencies
bash
Copiar código
pip install -r requirements.txt
If you don't have a requirements.txt file yet, here are the main packages you need:

bash
Copiar código
pip install Django==5.1.2
pip install redis==5.0.0
pip install celery==5.4.0
pip install python-decouple
4. Install and run Redis
On Ubuntu
Install Redis by running:

bash
Copiar código
sudo apt update
sudo apt install redis-server
Ensure that Redis is running:

bash
Copiar código
sudo systemctl start redis
To check if Redis is active:

bash
Copiar código
redis-cli ping
You should get PONG if it’s running.

5. Configure environment variables
Create a .env file in the project’s root folder and add your configurations:

makefile
Copiar código
SECRET_KEY=your-django-secret-key
DEBUG=True

EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password

# If you're using Gmail, create an app password for your email.
6. Migrate the database
Run the following command to set up the SQLite database:

bash
Copiar código
python manage.py migrate
7. Run Celery worker
Start the Celery worker process by running:

bash
Copiar código
celery -A project worker --loglevel=info
Make sure Redis is running, as Celery uses Redis as a message broker.

8. Run the Django server
Run the Django development server with:

bash
Copiar código
python manage.py runserver
Sending Emails
This project demonstrates sending emails asynchronously. You can send an email by submitting the form located at localhost:8000/send-email/.

Celery + Redis
Redis acts as the message broker for Celery, storing the tasks (in this case, sending emails) that need to be executed in the background.
Celery retrieves these tasks from Redis and processes them in the background. This allows the web application to remain responsive while the email is being sent asynchronously.
To stop Celery:
bash
Copiar código
pkill -f 'celery worker'
